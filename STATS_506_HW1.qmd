---
title: "STATS 506 Problem Set #1"
author: "Haiming Li"
format: 
  html:
    toc: true
---

## Wine Data

a. Data loading.

```{r q1a}
wine_df <- read.csv('./wine/wine.data', header=FALSE)
names(wine_df) <- c('class', 'alcohol', 'malic_acid', 'ash', 
                    'alcalinity_of_ash', 'magnesium', 'total_phenols',
                    'flavanoids', 'nonflavanoid_phenols', 'proanthocyanins', 
                    'color_intensity', 'hue', 'od280_od315_ratio', 'proline')
```

b.  Class count seems to be consistent.

```{r q1b}
table(wine_df$class)
```

c.  Here are the answers.
    1.  Correlation is 0.5463642.

```{r q1c_1}
cor(wine_df$alcohol, wine_df$color_intensity)
```
  2. It seems class 1 have the highest correlation and class 2 have the lowest.
```{r q1c_2}
splited_df <- split(wine_df, wine_df$class)
sapply(splited_df, function(df) cor(df$alcohol, df$color_intensity))
```
  3. The alcohol content of the wine with the highest color intensity is 14.34.
```{r q1c_3}
wine_df$alcohol[which.max(wine_df$color_intensity)]
```
  4. 8.43% of wines had a higher content of proanthocyanins compare to ash.
```{r q1c_4}
mean(wine_df$proanthocyanins > wine_df$ash)
```
d. Here's the table. Notice that here I used a previously defined variable that splits the dataframe based on class.
```{r q1d}
res <- data.frame(
  overall=colMeans(wine_df[,-1]),
  class1=colMeans(splited_df$"1"[,-1]),
  class2=colMeans(splited_df$"2"[,-1]),
  class3=colMeans(splited_df$"3"[,-1])
)
data.frame(t(res))
```
e. Here we can see all p-values are less than 0.05, thus we can reject the null hypothesis. The phenols level appears to be different across classes.
```{r q1e}
# class 1 v.s. class 2
t.test(splited_df$"1"$total_phenols, splited_df$"2"$total_phenols)
# class 1 v.s. class 3
t.test(splited_df$"1"$total_phenols, splited_df$"3"$total_phenols)
# class 2 v.s. class 3
t.test(splited_df$"2"$total_phenols, splited_df$"3"$total_phenols)
```

## AskAManager.org Data
a. Data loading. (I removed the useless index column)
```{r q2a}
df <- read.csv("AskAManager.csv")[-1]
```
b. Column cleaning.
```{r q2b}
names(df) <- c('timestamp', 'age', 'industry', 'job_title', 'job_title_context',
               'salary', 'additional_income', 'income_currency', 'other_currency', 
               'income_context', 'country', 'state', 'city', 'yoe_total', 'yoe_in_field', 
               'highest_education', 'gender', 'race')
```
c. Filter by income currency.
```{r q2c}
# make necessary columns as factor
df$income_currency <- as.factor(df$income_currency)
print(paste('Obs before:', dim(df)[1]))
df <- subset(df, income_currency == 'USD')
print(paste('Obs after: ', dim(df)[1]))
```

d. Remove impossible working experience. My filtering logic that that total year of experience should be at least as much as year of experience in the field. For people in age range 18 ~ 24, it is impossible to gain total yoe beyond 7 years; for people in age range 25 ~ 34, it is impossible to gain total yoe beyond 16 years; for people in age range 35 ~ 44, it is impossible to gain total yoe beyond 26 years; for people in age range 45 ~ 54, it is impossible to gain total yoe beyond 36 years.
```{r q2d}
# convert necessary columns to factor
yoe_levels <- c("1 year or less", "2 - 4 years", "5-7 years", "8 - 10 years",
                "11 - 20 years", "21 - 30 years", "31 - 40 years", "41 years or more")
df$age <- as.factor(df$age)
df$yoe_total <- factor(df$yoe_total, yoe_levels, ordered = TRUE)
df$yoe_in_field <- factor(df$yoe_in_field, yoe_levels, ordered = TRUE)

#' @param  age age in a row of data
#' @param  yoe_total total year of experience in a row of data
#' @param  yoe_in_field year of experience in field in a row of data
#' @return A boolean value indicate whether the row of data is valid
isValid <- function(age, yoe_total, yoe_in_field) {
  if (age == "under 18") {
    return(FALSE)
  }
  if (yoe_in_field > yoe_total) {
    return(FALSE)
  }
  if (age == "18-24" & yoe_total > "5-7 years") {
    return(FALSE)
  }
  if (age == "25-34" & yoe_total > "11 - 20 years") {
    return(FALSE)
  }
  if (age == "35-44" & yoe_total > "21 - 30 years") {
    return(FALSE)
  }
  if (age == "45-54" & yoe_total > "31 - 40 years") {
    return(FALSE)
  }
  return(TRUE)
}

res <- mapply(isValid, df$age, df$yoe_total, df$yoe_in_field)
print(paste('Obs before:', dim(df)[1]))
df <- df[res,]
print(paste('Obs after: ', dim(df)[1]))
```

e. I will be using the IQR method to identify outliers. (see citation) This method might remove some realistic observations, but it will help stabilize the distribution of salary. This may help with modeling as some models are very sensitive to outliers. As shown by the histogram, the filtered salary is somewhat normally distributed, which can be a desirable property for certain types of model.
```{r q2e}
m <- median(df$salary)
iqr <- IQR(df$salary)
min_val <- m - 1.5 * iqr
max_val <- m + 1.5 * iqr

print(paste('Obs before:', dim(df)[1]))
df <- subset(df, salary >= min_val & salary <= max_val)
print(paste('Obs after: ', dim(df)[1]))
hist(df$salary)
```


## Palindromic Numbers
a. Here's the function.
```{r q3a}
#' @param n Positive integer
#' @return A list with two elements:
#'         - isPalindromic: Boolean indicating if the input is palindromic
#'         - reversed: The input with its digits reversed
isPalindromic <- function(n) {
  # check invalid input
  if (!is.numeric(n) | !(all.equal(n, as.integer(n)) == TRUE) | n <= 0) {
    stop('Invalid input: positive integer only')
  }
  
  # convert to vector of character
  s <- strsplit(as.character(n), '')[[1]]
  # reverse the vector and convert back to number
  reverse_n <- as.numeric(paste(s[length(s):1], collapse = ''))
  
  return(list(isPalindromic=(all.equal(n, reverse_n) == TRUE), reversed=reverse_n))
}
```
b. Here's the function.
```{r q3b}
#' @param n Positive integer
#' @return Next palindromic number greater than the input
nextPalindrome <- function(n) {
  # check invalid input
  if (!is.numeric(n) | !(all.equal(n, as.integer(n)) == TRUE) | n <= 0) {
    stop('Invalid input: positive integer only')
  }
  
  next_n <- n + 1
  while (!isPalindromic(next_n)$isPalindromic) {
    next_n <- next_n + 1
  }
  
  return(next_n)
}
```
c. Here are the results.
```{r q3c}
# i
nextPalindrome(391)
# ii
nextPalindrome(9928)
# iii
nextPalindrome(19272719)
# iv
nextPalindrome(109)
# v
nextPalindrome(2)
```
## Citaton & Link to GitHub
* [Use of ordered factor & mapply() in Q2d](https://stackoverflow.com/questions/39488927/apply-function-to-each-row-of-data-frame-and-preserve-column-classes)
* [Outlier detection in Q2e](https://builtin.com/articles/1-5-iqr-rule)
* [GitHub Repo of this Pset](https://github.com/haiming12138/stats506_hw1.git)




